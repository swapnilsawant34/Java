package collection_class_program;

/*package whatever //do not write package name here */

import java.io.*;

import java.util.*;

class Playerr {
	private int id;
	private String name;

	public Playerr(String name, int id, int run) {
		this.name = name;
		this.id = id;
		this.run = run;
	}

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public int getRun() {
		return run;
	}

	public void setRun(int run) {
		this.run = run;
	}

	private int run;

	public boolean equals(Object obj) {        //boolean equals(Object): this method accept object as parameter and compare parameter object with 
		                                        //working object if both objects are equal return true otherwise return false
		                                         //here p.id is parameter object and this.id is working object.
		Playerr p = (Playerr) obj;
		if (p.id == this.id && p.name.equals(this.name) && p.run == this.run) {
			return true;
		} else {
			return false;
		}
	}

	public int hashCode() {
		return id * 100;
	}
}

public class SetWithUserDefinedObjectApplication {
	public static void main(String[] args) {
		LinkedHashSet hs = new LinkedHashSet();
		Playerr p1 = new Playerr("ABC", 1, 1000);// 100
		Playerr p2 = new Playerr("MNO", 2, 2000);// 200
		Playerr p3 = new Playerr("PQR", 3, 2000);// 300
		Playerr p4 = new Playerr("ABC", 1, 1000);// 100 //here p1 and p4 object having same hashcode and same value so LinkedHashSet is not allowed duplicate data.
		hs.add(p1);
		hs.add(p2);
		hs.add(p3);
		hs.add(p4);
		for (Object obj : hs) {
			Playerr p = (Playerr) obj;
			System.out.println(p.getId() + "\t" + p.getName() + "\t" + p.getRun() + "\t" + System.identityHashCode(p));
		}
	}
}

/*Q. why we need to generate two objects hash codes same if objects are equal?
Scenario: Some time if we store user defined objects in Set Collection then there is possibility Set 
collection can store duplicated data because Set collection cross verify hash code of object when we add 
element in Set Collection and by default every object has unique hash code generated by JVM so when 
we add user defined object in Set Collection then Set collection first compare hash code of new object 
with object those already present in Set collection if new object hash code match with previous objects
in Set collection then Set consider it is duplicated data otherwise Set allow data but if we think about 
user defined object then JVM generate different hash code to every object even data of two objects are 
same so there is possibility set can store duplicated data when we add user defined objects in set it 
above in following code
 * 
 * 
 */

